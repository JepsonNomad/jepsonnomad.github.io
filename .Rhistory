end = endDate)
NDVI = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[3],
internal = T,
start = startDate,
end = endDate)
DOY = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[4],
internal = T,
start = startDate,
end = endDate)
dlEnd = Sys.time()
dlEnd - dlStart
# Make a new data.frame that will contain binarized VIQ values.
VIQbin = VIQ
# Solve for VI Quality
# Source: https://gis.stackexchange.com/questions/144441/how-can-i-parse-modis-mod13q1-quality-layers-in-r
first_k_bits <- function(int, k=16, reverse=T) {
integer_vector <- as.integer(intToBits(int))[1:k]
if(reverse) integer_vector <- rev(integer_vector)
return(paste(as.character(integer_vector), collapse=""))
}
first_k_bits(7633)
# Binarize the VIQ values:
VIQbin_list = lapply(VIQ$value,
FUN = first_k_bits)
VIQbin_vector = unlist(VIQbin_list)
VIQbin$value = as.character(VIQbin_vector)
# Compile each band's time series dataframe into a list.
myBands = list(VIQbin,
PR,
NDVI,
DOY)
# Visualize Pixel Reliability time series
# Note that PR == 0 means good data
# PR == 1 is maybe good, but we should check other VIQ stuff
# Here, I added a slight jitter to aid with visibility of
# overlapping points.
ggplot(myBands[[2]],
aes(x = as.POSIXct(calendar_date),
y = value,
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
geom_line() +
ylab("QA") +
xlab("Date") +
ggtitle("Raw pixel quality") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
# Land/water; this flag lives on bits 11-13, which comprise the
# 3rd through 5th integers in the converted VIQ string.
ggplot(myBands[[1]],
aes(x = as.POSIXct(calendar_date),
y = substr(value, start = 3, stop = 5),
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
ylab("LandWater") +
xlab("Date") +
ggtitle("Land/Water Flag") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
# Snow/ice; this flag is bit 14, which is the second integer
# in the converted VIQ string
ggplot(myBands[[1]],
aes(x = as.POSIXct(calendar_date),
y = as.numeric(substr(value, start = 2, stop = 2)),
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
geom_line() +
ylab("SnowIce") +
xlab("Date") +
ggtitle("Snow/Ice Flag") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
# Land/water; this flag lives on bits 11-13, which comprise the
# 3rd through 5th integers in the converted VIQ string.
ggplot(myBands[[1]],
aes(x = as.POSIXct(calendar_date),
y = substr(value, start = 3, stop = 5),
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
ylab("LandWater") +
xlab("Date") +
ggtitle("Land/Water Flag") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
myBands
myBands[[1]]
# Visualize raw NDVI
# Note that MODIS reports NDVI on a scale of 10,000, so divide the values accordingly for visualization.
Rawplot = ggplot(myBands[[3]],
aes(x = as.POSIXct(calendar_date),
y = value/10000,
col = site)) +
geom_point() +
geom_line() +
ylab("NDVI") +
xlab("Date") +
ggtitle("Raw NDVI download") +
theme_classic() +
scale_color_brewer(palette = "Dark2"); Rawplot
# Remove instances where pixel reliability is > 1 (bad data!)
# This makes a new list object with the same elements as myBands,
# but values for all bands where Pixel Reliability > 1 are
# converted into NA's.
PR_filtered = lapply(myBands,
function(x){
x$value[myBands[[2]]$value > 1] <- NA
return(x)
})
# Visualize
PRplot = ggplot(PR_filtered[[3]],
aes(x = as.POSIXct(calendar_date),
y = value/10000,
col = site)) +
geom_point() +
geom_line() +
ylab("NDVI") +
xlab("Date") +
ggtitle("After pixel reliability filter") +
theme_classic() +
scale_color_brewer(palette = "Dark2"); PRplot
myBands[[myBands[[2]]$value =< 1]]
myBands[[myBands[[2]]$value <= 1]]
myBands[[2]][myBands[[2]]$value <= 1]
myBands[[2]][myBands[[2]]$value <= 1,]
myBands[[2]][myBands[[2]]$site == "Stovepipe",]
ROIs = data.frame("site_name" = c("Coe",
"Solano",
"Lake Tahoe",
"Mt. Lyell",
"Whiskey Falls",
"Alabama Hills",
"Badwater"),
"lat" = c(37.2021213,
38.4412444,
39.0898006,
37.7393911,
37.2869562,
36.634138,
36.2297364),
"lon" = c(-121.4346147,
-121.7082489,
-120.0329867,
-119.2805897,
-119.4471062,
-118.112799,
-116.7748862))
# List available products, choose one
products = mt_products()
products$product
MODproduct = "MOD13Q1"
# See available dates, choose a window
availableDates = mt_dates(MODproduct, ROIs$lat[1], ROIs$lon[1])
head(availableDates)
availableDates
# See available dates, choose a window
availableDates = mt_dates(MODproduct)
# See available dates, choose a window
availableDates = mt_dates(MODproduct, ROIs$lat[1], ROIs$lon[1])
head(availableDates)
startDate = "2016-01-01"
endDate = "2019-12-31"
# List available bands
bands = mt_bands(MODproduct)
bands$band
availableDates
# Useful here are bands 1 (VI quality), 3 (Pixel reliability),
# 6 (NDVI), 8 (Composite day of year) and possibly 11 (EVI),
# depending on your needs. Here we'll ignore EVI.
bandsOfInterest = bands[c(1,3,6,8),]$band
bandsOfInterest
dlStart = Sys.time()
# Batch download MODIS timeseries
VIQ = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[1],
internal = T,
start = startDate,
end = endDate)
PR = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[2],
internal = T,
start = startDate,
end = endDate)
NDVI = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[3],
internal = T,
start = startDate,
end = endDate)
DOY = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[4],
internal = T,
start = startDate,
end = endDate)
CA = USAboundaries::us_states(resolution = "low",
states = "CA")
ggplot() +
geom_line(CA) +
geom_point(data = ROIs,
aes(x = lon, y = lat))
CA
ggplot() +
geom_sf(CA) +
geom_point(data = ROIs,
aes(x = lon, y = lat))
ggplot() +
geom_sf(data = CA) +
geom_point(data = ROIs,
aes(x = lon, y = lat))
ggplot() +
geom_sf(data = CA) +
geom_point(data = ROIs,
aes(x = lon, y = lat,
label = site))
ggplot() +
geom_sf(data = CA) +
geom_point(data = ROIs,
aes(x = lon, y = lat)) +
geom_text(data = ROIs,
aes(x = long + 0.1,
y = lat + 0.1,
label = site))
ggplot() +
geom_sf(data = CA) +
geom_point(data = ROIs,
aes(x = lon, y = lat)) +
geom_text(data = ROIs,
aes(x = long + 0.1,
y = lat + 0.1,
label = site_name))
ggplot() +
geom_sf(data = CA) +
geom_point(data = ROIs,
aes(x = lon, y = lat)) +
geom_text(data = ROIs,
aes(x = lon + 0.1,
y = lat + 0.1,
label = site_name))
ggplot() +
geom_sf(data = CA) +
geom_point(data = ROIs,
aes(x = lon, y = lat)) +
geom_text(data = ROIs,
aes(x = lon,
y = lat + 0.3,
label = site_name))
# Define sites of interest
ROIs = data.frame("site_name" = c("Coe",
"Solano",
"Lake Tahoe",
"Mt. Lyell",
"Whiskey Falls",
"Alabama Hills",
"Badwater"),
"lat" = c(37.2021213,
38.4412444,
39.0898006,
37.7393911,
37.2869562,
36.634138,
36.2297364),
"lon" = c(-121.4346147,
-121.7082489,
-120.0329867,
-119.2805897,
-119.4471062,
-118.112799,
-116.7748862))
# List available products, choose one
products = mt_products()
products$product
MODproduct = "MOD13Q1"
# See available dates, choose a window
availableDates = mt_dates(MODproduct, ROIs$lat[1], ROIs$lon[1])
head(availableDates)
startDate = "2016-01-01"
endDate = "2019-12-31"
# List available bands
bands = mt_bands(MODproduct)
bands$band
# Useful here are bands 1 (VI quality), 3 (Pixel reliability),
# 6 (NDVI), 8 (Composite day of year) and possibly 11 (EVI),
# depending on your needs. Here we'll ignore EVI.
bandsOfInterest = bands[c(1,3,6,8),]$band
bandsOfInterest
# Benchmark the download time
dlStart = Sys.time()
# Batch download MODIS timeseries
VIQ = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[1],
internal = T,
start = startDate,
end = endDate)
PR = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[2],
internal = T,
start = startDate,
end = endDate)
NDVI = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[3],
internal = T,
start = startDate,
end = endDate)
DOY = mt_batch_subset(df = ROIs,
product = MODproduct,
band = bandsOfInterest[4],
internal = T,
start = startDate,
end = endDate)
dlEnd = Sys.time()
dlEnd - dlStart
# Make a new data.frame that will contain binarized VIQ values.
VIQbin = VIQ
# Solve for VI Quality
# Source: https://gis.stackexchange.com/questions/144441/how-can-i-parse-modis-mod13q1-quality-layers-in-r
first_k_bits <- function(int, k=16, reverse=T) {
integer_vector <- as.integer(intToBits(int))[1:k]
if(reverse) integer_vector <- rev(integer_vector)
return(paste(as.character(integer_vector), collapse=""))
}
first_k_bits(7633)
# Binarize the VIQ values:
VIQbin_list = lapply(VIQ$value,
FUN = first_k_bits)
VIQbin_vector = unlist(VIQbin_list)
VIQbin$value = as.character(VIQbin_vector)
# Compile each band's time series dataframe into a list.
myBands = list(VIQbin,
PR,
NDVI,
DOY)
# Visualize Pixel Reliability time series
# Note that PR == 0 means good data
# PR == 1 is maybe good, but we should check other VIQ stuff
# Here, I added a slight jitter to aid with visibility of
# overlapping points.
ggplot(myBands[[2]],
aes(x = as.POSIXct(calendar_date),
y = value,
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
geom_line() +
ylab("QA") +
xlab("Date") +
ggtitle("Raw pixel quality") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
# Land/water; this flag lives on bits 11-13, which comprise the
# 3rd through 5th integers in the converted VIQ string.
ggplot(myBands[[1]],
aes(x = as.POSIXct(calendar_date),
y = substr(value, start = 3, stop = 5),
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
ylab("LandWater") +
xlab("Date") +
ggtitle("Land/Water Flag") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
# Snow/ice; this flag is bit 14, which is the second integer
# in the converted VIQ string
ggplot(myBands[[1]],
aes(x = as.POSIXct(calendar_date),
y = as.numeric(substr(value, start = 2, stop = 2)),
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
geom_line() +
ylab("SnowIce") +
xlab("Date") +
ggtitle("Snow/Ice Flag") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
# Land/water; this flag lives on bits 11-13, which comprise the
# 3rd through 5th integers in the converted VIQ string.
ggplot(myBands[[1]],
aes(x = as.POSIXct(calendar_date),
y = substr(value, start = 3, stop = 5),
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
ylab("LandWater") +
xlab("Date") +
ggtitle("Land/Water Flag") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
# Snow/ice; this flag is bit 14, which is the second integer
# in the converted VIQ string
ggplot(myBands[[1]],
aes(x = as.POSIXct(calendar_date),
y = as.numeric(substr(value, start = 2, stop = 2)),
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
geom_line() +
ylab("SnowIce") +
xlab("Date") +
ggtitle("Snow/Ice Flag") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
# Visualize raw NDVI
# Note that MODIS reports NDVI on a scale of 10,000, so divide the values accordingly for visualization.
Rawplot = ggplot(myBands[[3]],
aes(x = as.POSIXct(calendar_date),
y = value/10000,
col = site)) +
geom_point() +
geom_line() +
ylab("NDVI") +
xlab("Date") +
ggtitle("Raw NDVI download") +
theme_classic() +
scale_color_brewer(palette = "Dark2"); Rawplot
# Remove instances where pixel reliability is > 1 (bad data!)
# This makes a new list object with the same elements as myBands,
# but values for all bands where Pixel Reliability > 1 are
# converted into NA's.
PR_filtered = lapply(myBands,
function(x){
x$value[myBands[[2]]$value > 1] <- NA
return(x)
})
# Visualize
PRplot = ggplot(PR_filtered[[3]],
aes(x = as.POSIXct(calendar_date),
y = value/10000,
col = site)) +
geom_point() +
geom_line() +
ylab("NDVI") +
xlab("Date") +
ggtitle("After pixel reliability filter") +
theme_classic() +
scale_color_brewer(palette = "Dark2"); PRplot
# Mask out additional data based on land/water and snow/ice masks
VIQ_filtered = lapply(PR_filtered,
FUN = function(x){
x$value[substr(PR_filtered[[1]]$value,
start = 3, stop = 5) != "001"] <- NA
x$value[substr(PR_filtered[[1]]$value,
start = 2, stop = 2) != "0"] <- NA
return(x)
})
# Visualize
VIQplot = ggplot(VIQ_filtered[[3]],
aes(x = as.POSIXct(calendar_date),
y = value/10000,
col = site)) +
geom_point() +
geom_line() +
ylab("NDVI") +
xlab("Date") +
ggtitle("After pixel land/water mask") +
theme_classic() +
scale_color_brewer(palette = "Dark2"); VIQplot
# Add three columns to each data.frame based on the DOY layer.
DOY_corrected = lapply(VIQ_filtered,
FUN = function(x){
x$DOY = VIQ_filtered[[4]]$value
x$Year = substr(x$calendar_date,
start = 1,
stop = 4)
x$YearDOY = paste(x$Year,
x$DOY,
sep = "-")
return(x)
})
# Visualize
DOYplot = ggplot(DOY_corrected[[3]],
aes(x = as.POSIXct(YearDOY,
format = "%Y-%j",
origin = "2001-01-01"),
y = value/10000,
col = site)) +
geom_point() +
geom_line() +
ylab("NDVI") +
xlab("Date") +
ggtitle("Accounting for composite date") +
theme_classic() +
scale_color_brewer(palette = "Dark2"); DOYplot
# Land/water; this flag lives on bits 11-13, which comprise the
# 3rd through 5th integers in the converted VIQ string.
ggplot(myBands[[1]],
aes(x = as.POSIXct(calendar_date),
y = substr(value, start = 3, stop = 5),
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
ylab("LandWater") +
xlab("Date") +
ggtitle("Land/Water Flag") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
# Snow/ice; this flag is bit 14, which is the second integer
# in the converted VIQ string
ggplot(myBands[[1]],
aes(x = as.POSIXct(calendar_date),
y = as.numeric(substr(value, start = 2, stop = 2)),
col = site)) +
geom_jitter(width = 0.1, height = 0.1) +
geom_line() +
ylab("SnowIce") +
xlab("Date") +
ggtitle("Snow/Ice Flag") +
theme_classic() +
scale_color_brewer(palette = "Dark2")
